service: sls-proclub-crawler

package:
  exclude:
    # - node_modules/**
    - .DS_Store
    - .gitignore
    - .npmignore
    - .git/**
    - .idea/**
    - package.json
    - package-lock.json
    - README.MD
    - data.json
  include:
    - node_modules/axios/
    - node_modules/debug/
    - node_modules/follow-redirects/
    - node_modules/is-buffer/
    - node_modules/ms/

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 512
  timeout: 300
  stage: dev
  region: ap-northeast-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource:
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/MemberStats_${self:provider.environment.ENV_ID}"
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/ClubStats_${self:provider.environment.ENV_ID}"
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/Match_${self:provider.environment.ENV_ID}"
        - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/MemberHistory_${self:provider.environment.ENV_ID}"

  environment:
    ENV_ID: "001"
    CLUB_ID_1: "3634186"
    CLUB_ID_2: "3876559"

functions:
  crawl:
    handler: handler.crawlMatch
    # events:
    #   - http:
    #       path: crawl
    #       method: post
  stats:
    handler: handler.saveStats
    # events:
    #   - http:
    #       path: stats
    #       method: post
          
stepFunctions:
  stateMachines:
    crawlProClubMatch1:
      name: crawl-relevant-agency
      events:
        - http:
            path: crawl1
            method: post
        - schedule:
            rate: rate(30 minutes)
            enabled: true
            input:
              clubId: ${self:provider.environment.CLUB_ID_1}
      definition:
        Comment: "ProClub Crawler for RELEVANT AGENCY"
        StartAt: CrawlMatch
        States:
          CrawlMatch:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-crawl"
            Next: SaveStats
          SaveStats:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-stats"
            End: true
    crawlProClubMatch2:
      name: crawl-temp-workers
      events:
        - http:
            path: crawl2
            method: post
        - schedule:
            rate: rate(30 minutes)
            enabled: true
            input:
              clubId: ${self:provider.environment.CLUB_ID_2}
      definition:
        Comment: "ProClub Crawler for TEMP WORKERS"
        StartAt: CrawlMatch
        States:
          CrawlMatch:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-crawl"
            Next: SaveStats
          SaveStats:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-stats"
            End: true

resources:
  Resources:
    ClubStatsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: clubId
            AttributeType: S
          - AttributeName: duration
            AttributeType: S
        KeySchema:
          - AttributeName: clubId
            KeyType: HASH
          - AttributeName: duration
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ClubStats_${self:provider.environment.ENV_ID}

    MatchTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: clubId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: clubId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: Match_${self:provider.environment.ENV_ID}

    MemberHistoryTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: playername
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: playername
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: MemberHistory_${self:provider.environment.ENV_ID}

    MemberStatsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: playername
            AttributeType: S
          - AttributeName: duration
            AttributeType: S
        KeySchema:
          - AttributeName: playername
            KeyType: HASH
          - AttributeName: duration
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: MemberStats_${self:provider.environment.ENV_ID}